    import java.util.*;
    public class DLL {
    class Node{
    public int data ;
    public Node nextNode;
    public Node prevNode;
    public Node(int data){
    this.data =data;
    }
    }
    Node headNode,tailNode=null;
    //ADDING NODE TO LINKEDLIST AT FRONT 

    public void addFront(int data){

      Node newNode =new Node(data);
       newNode.nextNode=headNode;
       newNode.prevNode=null;

      if(headNode!=null) {
        headNode.prevNode=newNode;  
      }
    
      headNode=newNode;    
      
      }
     //Adding node at rear
    public void addDLLNode(int data){  
    Node newDLLNode=new Node(data);
    if(headNode==null){
    headNode=tailNode=newDLLNode;
    headNode.prevNode=null;
    tailNode.nextNode=null;
    }
    else{ 
    tailNode.nextNode=newDLLNode;
    newDLLNode.prevNode=tailNode;
    tailNode=newDLLNode;
    tailNode.nextNode=null;
    }
    }
   //insertion at any position 
    public void addAny(int pos,int data)
    {  
        tailNode=null;
        int c=0;
        while(c!=pos)   
        {
tailNode=tailNode.nextNode;
        }
if(tailNode==null)
{
    System.out.println(
        "The given previous node cannot be NULL ");
    return;
}
Node newNode=new Node(data);
newNode.nextNode=tailNode.prevNode;
 

    }
   public void deleteNode(int pos)
    {
        int i=0;
        while(tailNode.nextNode!=null) {
        tailNode=tailNode.nextNode;
        i++;
        } 
        i=i+1;
        if(pos==1)
        {
        headNode.nextNode.prevNode=null;
        headNode=headNode.nextNode;
        }
        else if(pos==i)
        {    
        tailNode.prevNode.nextNode=null;
        tailNode=tailNode.prevNode;
        }
        else 
        {  
        tailNode=null;int c=1;
        while(c!=pos)
        {
        tailNode=tailNode.nextNode;
         c++;
        }
       tailNode.nextNode.prevNode=tailNode.prevNode;
       tailNode.prevNode.nextNode=tailNode.nextNode;

      }

    }
    public void displayNode(){
    Node currentNode=headNode;
    if(headNode==null) {
    System.out.println("Linked List empty");
    return;}
    System.out.println("NODES IN THE LINKED LIST");
    System.out.println("-------------------------");
    while(currentNode!=null)
    {
    System.out.print(currentNode.data+" ");
    currentNode=currentNode.nextNode;  
    }
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int c=5;
        DLL LinkedList =new DLL();
         while(c>0)
        {
        System.out.println("MENU");
        System.out.println("1:Add from front ");
        System.out.println("2: Add new node from rear");
        System.out.println("3: Add at any position ");
        System.out.println("4:delete a node ");
        System.out.println("5:Display the linked list");
        System.out.println("6:Exit");
        System.out.println("Enter your choice");
        int ch=sc.nextInt();
       
        switch(ch)
        {
            case 1://from front 
            {   System.out.println("Enter the number to be inserted");
                int item=sc.nextInt();
                LinkedList.addFront(item);
                break;

            }
            case 2://from rear
            {   System.out.println("Enter the number to be inserted");
                int item=sc.nextInt();
                LinkedList.addDLLNode(item);
                break;
            }
            case 3://at any pos
            {   System.out.println("Enter the number to be inserted");
                int item=sc.nextInt();
                System.out.println("Enter the number after which u wanna insert the node");
                int data=sc.nextInt();
                LinkedList.addAny(item,data);
                break;
            }

            case 4://deletion from linked list 
            {    
                System.out.println(" enter the position of element to be ");
                int pos =sc.nextInt();
                LinkedList.deleteNode(pos);
                break;
            }


            case 5:
            {    System.out.println("Linked List is : ");
                 LinkedList.displayNode();
                 break;
            }
           case 6:
           {
            System.exit(0);
              break;
           }
            default:
            {   System.out.println("Wrong input");
                    break;

            }
            }
        }sc.close();
         }
        }
  
